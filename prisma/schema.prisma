// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ArticleState{
  DRAFT
  PUBLISHED 
}

// user may have one or multiple article and article must be associated to a user
// user은 하나 혹은 여러개의 article을 가질수 있으며 article은 user와 연결되야 한다. 

model Article{
  id Int @id @default(autoincrement())
  title String
  content String
  state ArticleState
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int 
  user User @relation(fields: [userId],references: [id])
  @@map("articles")
}

model Profile{
  id Int @id @default(autoincrement())
  addr String
  phone String
  userId Int @unique // foreign key 
  user User @relation(fields: [userId],references: [id]) 
}

// users and profiles
// user may have a single profile and profile must be linked to a user
// user는 하나의 profile을 가질수 있고 그렇다면 그것은 user 레코드와 연결된다.

model User{
  id Int @id @default(autoincrement())
  email String @unique
  name  String 
  profile Profile?
  articles Article[]
  carts Cart[]
}


model Seller{
  id Int @id @default(autoincrement())
  email String @unique
  name  String 
  products Product[]
}

model Product{
  id Int @id @default(autoincrement())
  title String
  price Float
  sellerId Int
  tag Tag[]
  carts Cart[]
  seller Seller @relation(fields: [sellerId],references: [id])
}

model Cart{
  id Int @id @default(autoincrement())
  userId Int
  productId Int 
  user User @relation(fields: [userId], references:[id])
  product Product @relation(fields: [productId], references: [id])
  quantity Int 
}

model Tag {
  id Int @id @default(autoincrement())
  name String
  product Product[]
}
